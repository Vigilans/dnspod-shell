#!/bin/sh
#

###################################################################
# AnripDdns v6.3.0
#
# Dynamic DNS using DNSPod API
#
# Author: Rehiy, https://github.com/rehiy
#                https://www.rehiy.com/?s=dnspod
#
# Collaborators: https://github.com/rehiy/dnspod-shell/graphs/contributors
#
# Usage: please refer to `ddnspod.sh`
#
################################################################### params ##

export arToken

# The url to be used for querying public ipv6 address. We set a default here.

export arIp6QueryUrl="http://ipv6.rpc.im/ip"

# Colon-separated paths to CA certificates for validation in an HTTPs request.
export arCaCertificates="/etc/ssl/certs/ca-certificates.crt:/opt/etc/ssl/certs/ca-certificates.crt"

# The error code to return when a ddns record is not changed
# By default, report unchanged event as success

export arErrCodeUnchanged=0

################################################################### logger ##

# Output log to stderr

arLog() {

    >&2 echo $@

}

################################################################### http client ##

# Use curl or wget open url
# Args: url postdata

arRequest() {

    local url="$1"
    local data="$2"

    local params=""
    local agent="AnripDdns/6.3.0(wang@rehiy.com)"

    local cacert=$(echo "$arCaCertificates" | tr ':' '\n' | xargs -I{} sh -c '[ -r {} ] && echo {}' 2>/dev/null | head -n 1)

    if type curl >/dev/null 2>&1; then
        if echo $url | grep -q ^https; then
            if [ -z "$cacert" ]; then
                params="$params -k"
            else
                params="$params --cacert $cacert"
            fi
        fi
        if [ -n "$data" ]; then
            params="$params -d $data"
        fi
        curl -s -A "$agent" $params $url
        return $?
    fi

    if type wget >/dev/null 2>&1; then
        if echo $url | grep -q ^https; then
            if [ -z "$cacert" ]; then
                params="$params --no-check-certificate"
            elif wget --help 2>&1 | grep -qs "GNU Wget"; then
                params="$params --ca-certificate $cacert"
            fi
        fi
        if [ -n "$data" ]; then
            params="$params --post-data $data"
        fi
        wget -qO- -U "$agent" $params $url
        return $?
    fi

    return 1

}

################################################################### ipv4 util ##

# Get regular expression for IPv4 LAN addresses

arLanIp4() {

    local lanIps="^$"

    lanIps="$lanIps|(^10\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$)"
    lanIps="$lanIps|(^127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$)"
    lanIps="$lanIps|(^169\.254\.[0-9]{1,3}\.[0-9]{1,3}$)"
    lanIps="$lanIps|(^172\.(1[6-9]|2[0-9]|3[0-1])\.[0-9]{1,3}\.[0-9]{1,3}$)"
    lanIps="$lanIps|(^192\.168\.[0-9]{1,3}\.[0-9]{1,3}$)"
    lanIps="$lanIps|(^100\.(6[4-9]|[7-9][0-9])\.[0-9]{1,3}\.[0-9]{1,3}$)"  # 100.64.x.x - 100.99.x.x
    lanIps="$lanIps|(^100\.1([0-1][0-9]|2[0-7])\.[0-9]{1,3}\.[0-9]{1,3}$)" # 100.100.x.x - 100.127.x.x

    echo $lanIps

}

# Get IPv4 by ip route or network

arWanIp4() {

    local hostIp
    local lanIps=$(arLanIp4)

    case $(uname) in
        'Linux')
            hostIp=$(ip -o -4 route get 100.64.0.1 | grep -oE 'src [0-9\.]+' | awk '{print $2}' | grep -Ev "$lanIps")
        ;;
        Darwin|FreeBSD)
            hostIp=$(ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' | grep -Ev "$lanIps")
        ;;
    esac

    if [ -z "$hostIp" ]; then
        return 2
    fi

    if [ -z "$(echo $hostIp | grep -E '^[0-9\.]+$')" ]; then
        arLog "> arWanIp4 - Invalid ip address"
        return 1
    fi

    echo $hostIp

}

# Get IPv4 from a specific interface
# Args: interface

arDevIp4() {

    local hostIp
    local lanIps=$(arLanIp4)

    case $(uname) in
        'Linux')
            hostIp=$(ip -o -4 addr show dev $1 primary | grep -oE 'inet [0-9.]+' | awk '{print $2}' | grep -Ev "$lanIps" | head -n 1)
        ;;
    esac

    if [ -z "$hostIp" ]; then
        arLog "> arDevIp4 - Can't get ip address"
        return 1
    fi

    if [ -z "$(echo $hostIp | grep -E '^[0-9\.]+$')" ]; then
        arLog "> arDevIp4 - Invalid ip address"
        return 1
    fi

    echo $hostIp

}

################################################################### ipv6 util ##

# Get regular expression for IPv6 LAN addresses

arLanIp6() {

    local lanIps="(^$)"

    lanIps="$lanIps|(^::1$)"
    lanIps="$lanIps|(^[fF][eE][8-9a-fA-F])" # Link-local addresses
    lanIps="$lanIps|(^[fF][cdCD])" # Unique local addresses

    echo $lanIps

}

# Get IPv6 by ip route or network

arWanIp6() {

    local hostIp
    local lanIps=$(arLanIp6)

    case $(uname) in
        'Linux')
            hostIp=$(ip -o -6 route get 100::1 | grep -oE 'src [0-9a-fA-F:]+' | awk '{print $2}' | grep -Ev "$lanIps")
        ;;
    esac

    if [ -z "$hostIp" ]; then
        hostIp=$(arRequest $arIp6QueryUrl)
    fi

    if [ -z "$hostIp" ]; then
        arLog "> arWanIp6 - Can't get ip address"
        return 1
    fi

    if [ -z "$(echo $hostIp | grep -E '^[0-9a-fA-F:]+$')" ]; then
        arLog "> arWanIp6 - Invalid ip address"
        return 1
    fi

    echo $hostIp

}

# Get IPv6 from a specific interface
# Args: interface

arDevIp6() {

    local hostIp
    local lanIps=$(arLanIp6)

    case $(uname) in
        'Linux')
            # Try obtain home address (a speical permanent address for mobile devices)
            hostIp=$(ip -o -6 addr show dev $1 scope global home | grep -oE 'inet6 [0-9a-fA-F:]+' | awk '{print $2}' | grep -Ev "$lanIps")
            if [ -z "$hostIp" ]; then # Try obtain permanent address
                hostIp=$(ip -o -6 addr show dev $1 scope global permanent | grep -oE 'inet6 [0-9a-fA-F:]+' | awk '{print $2}' | grep -Ev "$lanIps")
            fi
            if [ -z "$hostIp" ]; then # Try obtain non-deprecated primary (non-temporary) non-mngtmpaddr (mngtmpaddr is template for temporary address creation) address then
                hostIp=$(ip -o -6 addr show dev $1 scope global -deprecated primary | grep -v mngtmpaddr | grep -oE 'inet6 [0-9a-fA-F:]+' | awk '{print $2}' | grep -Ev "$lanIps")
            fi
            if [ -z "$hostIp" ]; then # Try obtain non-deprecated primary address then
                hostIp=$(ip -o -6 addr show dev $1 scope global -deprecated primary | grep -oE 'inet6 [0-9a-fA-F:]+' | awk '{print $2}' | grep -Ev "$lanIps")
            fi
            if [ -z "$hostIp" ]; then # Try obtain non-deprecated address any at last
                hostIp=$(ip -o -6 addr show dev $1 scope global -deprecated | grep -oE 'inet6 [0-9a-fA-F:]+' | awk '{print $2}' | grep -Ev "$lanIps")
            fi
            hostIp=$(echo "$hostIp" | head -n 1) # Fetch at most one address
        ;;
    esac

    if [ -z "$hostIp" ]; then
        arLog "> arDevIp6 - Can't get ip address"
        return 1
    fi

    if [ -z "$(echo $hostIp | grep -E '^[0-9a-fA-F:]+$')" ]; then
        arLog "> arDevIp6 - Invalid ip address"
        return 1
    fi

    echo $hostIp

}

# Get IPv6 of a neighbor from a specific interface by its MAC address
# Args: interface mac

arLinkIp6() {

    local hostIp

    local lanIps=$(arLanIp6)

    case $(uname) in
        'Linux')
            ### 1. Refresh neighbor table
            # Derive a list of possible public IPv6 addresses as candidates
            local neighborIps=$(ip -o -6 neigh show dev $1 | grep "lladdr $2" | awk '{print $1}')

            # Extract all prefixes and interface identifiers from candidates
            local prefixes=$(echo "$neighborIps" | arPrefixIp6)
            local ifaceIds=$(echo "$neighborIps" | arIdentifierIp6)

            # Extend prefixes and interface identifiers
            prefixes=$(printf "%s\n%s" "$prefixes" "$(echo $1 | arNicPrefixesIp6)") # Append prefixes from host's interface
            ifaceIds=$(printf "%s\n%s" "$ifaceIds" "$(echo $2 | arMacEuiIp6 1)")   # Append flipped EUI-64 from MAC address

            # Do a batch ping requests over the combinations of prefixes and interface identifiers for at most 5 seconds
            # This enforces refreshing of states in the neighbor discovery cache. Related state transitions:
            #  * Ping packet sent: REACHABLE -> REACHABLE, DELAY -> DELAY, STALE -> DELAY, PROBE -> PROBE
            #  * Ping packet recv: REACHABLE -> REACHABLE, DELAY -> DELAY or REACHABLE, PROBE -> PROBE or REACHABLE
            #  * Ping packet fail: REACHABLE -> PROBE, DELAY -> PROBE, PROBE -> PROBE or DELETED (PROBE needs 5 seconds of no response)
            # Therefore, we need both REACHABLE and DELAY for available IPv6 address, and use 5s timeout to force unresponded DELAY address becomes PROBE.
            arLog "> arLinkIp6 - Ping candidate ips for at most 5 seconds"
            local prefix ifaceId
            for prefix in $(echo "$prefixes" | sort | uniq); do
                for ifaceId in $(echo "$ifaceIds" | sort | uniq); do
                    arLog "> arLinkIp6 - $prefix:$ifaceId"
                    ping -I $1 -c 1 -W 5 "$prefix:$ifaceId" 1>/dev/null 2>&1 &
                done
            done
            wait # Wait for all ping requests to finish (at most 5 seconds)

            ### 2. Derive hostIp
            # Pick all IPv6 addresses in REACHABLE or DELAY (because a successful ping response is received during DELAY) state
            local availableNeighbor=$(ip -o -6 neigh show dev $1 nud reachable nud delay | grep "lladdr $2" | awk '{print $1}')

            # Collect deprecated prefixes and interface identifiers of link-local (fe80::/10) and unique-local (fc00::/7) addresses for filtering out better hostIp
            local deprecatePrefixes=$(ip -o -6 addr show dev $1 scope global deprecated | grep -oE 'inet6 [0-9a-fA-F:]+' | awk '{print $2}' | arPrefixIp6 | tr '\n' '|' | sed 's/|$/\n/')
            local linkLocalIfaceIds=$(echo "$availableNeighbor" | grep -E "^[fF][eE][8-9a-fA-F]" | arIdentifierIp6 | sort | uniq | tr '\n' '|' | sed 's/|$/\n/')
            local uniqLocalIfaceIds=$(echo "$availableNeighbor" | grep -E "^[fF][cdCD]" | arIdentifierIp6 | sort | uniq | tr '\n' '|' | sed 's/|$/\n/')

            # Pick all public non-deprecated ipv6 addresses
            local publicIps=$(echo "$availableNeighbor" | arExpandIp6 | grep -Ev "$lanIps")
            if [ -n "$deprecatePrefixes" ]; then
                publicIps=$(echo "$publicIps" | grep -Ev "$deprecatePrefixes")
            fi

            # Select a public ipv6 address according a specific order of preferences
            if [ -n "$uniqLocalIfaceIds" ]; then # Prefer public address that has the same interface id as unique-local ones (since it may derive from DHCPv6)
                hostIp=$(echo "$publicIps" | grep -E "$uniqLocalIfaceIds" | head -n 1)
            fi
            if [ -z "$hostIp" ] && [ -n "$linkLocalIfaceIds" ]; then # Try address that has the same interface id as link-local ones (since it dervies from SLAAC, which is non-temporary)
                hostIp=$(echo "$publicIps" | grep -E "$linkLocalIfaceIds" | head -n 1)
            fi
            if [ -z "$hostIp" ]; then # Use first available address sorted by interface id from lower to higher (since shorter ones may be assigned by DHCPv6, which is relatively non-temporary)
                hostIp=$(echo "$publicIps" | sort | head -n 1)
            fi
            hostIp=$(echo "$hostIp" | arCompressIp6)
        ;;
    esac

    if [ -z "$hostIp" ]; then
        arLog "> arLinkIp6 - Can't get ip address from $2"
        return 1
    fi

    if [ -z "$(echo $hostIp | grep -E '^[0-9a-fA-F:]+$')" ]; then
        arLog "> arLinkIp6 - Invalid ip address"
        return 1
    fi

    echo $hostIp

}

# Convert any IPv6 address to expanded form (address string of fixed length 39)
# Stdin: ipv6

arExpandIp6() {
    while read ip && test -n "$ip"; do
        # prepend 0 if start with :
        echo $ip | grep -qs "^:" && ip="0${ip}"

        # expand ::
        if echo $ip | grep -qs "::"; then
            local colons=$(echo $ip | sed 's/[^:]//g')
            local expanded=$(echo ":::::::::" | sed -e "s/$colons//" -e 's/:/:0/g')
            ip=$(echo $ip | sed "s/::/$expanded/")
        fi

        # format as full ipv6 address form and output
        echo $ip | grep -o "[0-9a-f]\+" | awk '{ print "0x"$0 }' | xargs printf "%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n"
    done
}

# Convert expanded IPv6 address back to normal compressed form
# Stdin: ipv6

arCompressIp6() {
    while read ip && test -n "$ip"; do
        # compress leading zeros, and prepend : for easier matching
        ip=$(echo $ip | grep -o "[0-9a-f]\+" | awk '{ print "0x"$0 }' | xargs printf ":%x:%x:%x:%x:%x:%x:%x:%x\n")

        # compress consecutive zeros (:: must compress the longest chain)
        for pattern in 0:0:0:0:0:0:0:0 :0:0:0:0:0:0:0 :0:0:0:0:0:0 :0:0:0:0:0 :0:0:0:0 :0:0:0 :0:0; do
            if echo $ip | grep -qs $pattern; then
                ip=$(echo $ip | sed "s/$pattern/::/")
                break
            fi
        done

        # remove prepending :, then correct ::: to :: and output
        echo $ip | sed -e 's/^://' -e 's/:::/::/'
    done
}

# Obtain the prefix part (the former 64 bit) of an IPv6 address
# Stdin: ipv6

arPrefixIp6() {
    arExpandIp6 | grep -oE '^[0-9a-f:]{19}'
}

# Obtain the interface identifier part (the latter 64 bit) of an IPv6 address
# Stdin: ipv6

arIdentifierIp6() {
    arExpandIp6 | grep -oE '[0-9a-f:]{19}$'
}

# Obtain all IPv6 prefixes bound to a specific network interface
# Args: exclude_regex (optional regex to filter the result, e.g. lanIps)
# Stdin: interface

arNicPrefixesIp6() {
    [ -n "$1" ] || set "^$" # Do not filter if no argument passed
    tr '\n' '\0' | xargs -0 -n1 ip -o -6 route show dev | awk '{print $1}' | grep -E "(/[1-5]?[0-9])|(/6[0-4])$" | awk -F/ '{print $1}' | grep -Ev "$1" | arPrefixIp6 | sort | uniq
}

# Generate an IPv6 EUI-64 interface identifier from MAC address
# Args: flip_ubit (whether to flip 7th bit of first byte, the universal/local bit)
# Stdin: mac

arMacEuiIp6() {
    local aa bb cc dd ee ff
    while IFS=: read aa bb cc dd ee ff; do
        printf "%02x%02x:%02xff:fe%02x:%02x%02x\n" $((0x$aa ^ (0x02*$1))) 0x$bb 0x$cc 0x$dd 0x$ee 0x$ff
    done
}

################################################################### dnspod api ##

# Dnspod Bridge
# Args: interface data

arDdnsApi() {

    local dnsapi="https://dnsapi.cn/${1:?'Info.Version'}"
    local params="login_token=$arToken&format=json&lang=en&$2"

    arRequest "$dnsapi" "$params"

}

# Fetch Record Id
# Args: domain subdomain recordType

arDdnsLookup() {

    local errMsg

    local recordId

    # Get Record Id
    recordId=$(arDdnsApi "Record.List" "domain=$1&sub_domain=$2&record_type=$3")
    recordId=$(echo $recordId | sed 's/.*"id":"\([0-9]*\)".*/\1/')

    if ! [ "$recordId" -gt 0 ] 2>/dev/null ;then
        errMsg=$(echo $recordId | sed 's/.*"message":"\([^\"]*\)".*/\1/')
        arLog "> arDdnsLookup - $errMsg"
        return 1
    fi

    echo $recordId
}

# Update Record Value
# Args: domain subdomain recordId recordType [hostIp]

arDdnsUpdate() {

    local errMsg

    local recordRs
    local recordCd
    local recordIp

    local lastRecordIp

    # if code for unchanged event is specified to be different from updated event, we fetch the last record ip
    if [ $arErrCodeUnchanged -ne 0 ]; then
        recordRs=$(arDdnsApi "Record.Info" "domain=$1&record_id=$3")
        recordCd=$(echo $recordRs | sed 's/.*{"code":"\([0-9]*\)".*/\1/')
        lastRecordIp=$(echo $recordRs | sed 's/.*,"value":"\([0-9a-fA-F\.\:]*\)".*/\1/')

        if [ "$recordCd" != "1" ]; then
            errMsg=$(echo $recordRs | sed 's/.*,"message":"\([^"]*\)".*/\1/')
            arLog "> arDdnsUpdate - error: $errMsg"
            return 1
        else
            arLog "> arDdnsUpdate - last record ip: $lastRecordIp"
        fi
    fi

    # update ip
    if [ -z "$5" ]; then
        recordRs=$(arDdnsApi "Record.Ddns" "domain=$1&sub_domain=$2&record_id=$3&record_type=$4&record_line=%e9%bb%98%e8%ae%a4")
    else
        recordRs=$(arDdnsApi "Record.Ddns" "domain=$1&sub_domain=$2&record_id=$3&record_type=$4&value=$5&record_line=%e9%bb%98%e8%ae%a4")
    fi

    # parse result
    recordCd=$(echo $recordRs | sed 's/.*{"code":"\([0-9]*\)".*/\1/')
    recordIp=$(echo $recordRs | sed 's/.*,"value":"\([0-9a-fA-F\.\:]*\)".*/\1/')

    if [ "$recordCd" != "1" ]; then
        errMsg=$(echo $recordRs | sed 's/.*,"message":"\([^"]*\)".*/\1/')
        arLog "> arDdnsUpdate - error: $errMsg"
        return 1
    elif [ $arErrCodeUnchanged -eq 0 ]; then
        arLog "> arDdnsUpdate - success: $recordIp" # both unchanged and updated event
        echo $recordIp
        return 0
    elif [ "$recordIp" = "$lastRecordIp" ]; then
        arLog "> arDdnsUpdate - unchanged: $recordIp" # unchanged event
        echo $recordIp
        return $arErrCodeUnchanged
    else
        arLog "> arDdnsUpdate - updated: $recordIp" # updated event
        echo $recordIp
        return 0
    fi

}

################################################################### task hub ##

# DDNS Check
# Args: domain subdomain [6|4] interface

arDdnsCheck() {

    local errCode

    local hostIp

    local recordId
    local recordType

    arLog "=== Check $2.$1 ==="
    arLog "Fetching Host Ip"

    if   [ "$3" = "6" ] && [ -n "$4" ] && [ -n "$5" ]; then
        recordType=AAAA
        hostIp=$(arLinkIp6 "$4" "$5")
    elif [ "$3" = "6" ] && [ -n "$4" ]; then
        recordType=AAAA
        hostIp=$(arDevIp6 "$4")
    elif [ "$3" = "4" ] && [ -n "$4" ]; then
        recordType=A
        hostIp=$(arDevIp4 "$4")
    elif [ "$3" = "6" ]; then
        recordType=AAAA
        hostIp=$(arWanIp6)
    else
        recordType=A
        hostIp=$(arWanIp4)
    fi

    errCode=$?
    if [ $errCode -eq 0 ]; then
        arLog "> Host Ip: $hostIp"
        arLog "> Record Type: $recordType"
    elif [ $errCode -eq 2 ]; then
        arLog "> Host Ip: Auto"
        arLog "> Record Type: $recordType"
    else
        arLog "$hostIp"
        return $errCode
    fi

    arLog "Fetching RecordId"
    recordId=$(arDdnsLookup "$1" "$2" "$recordType")

    errCode=$?
    if [ $errCode -eq 0 ]; then
        arLog "> Record Id: $recordId"
    else
        arLog "$recordId"
        return $errCode
    fi

    arLog "Updating Record value"
    arDdnsUpdate "$1" "$2" "$recordId" "$recordType" "$hostIp"

}

################################################################### end ##
